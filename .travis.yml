services:
  - docker

env:
  global:
    - PDBSERVER="http://192.168.0.1:7474"
    - PDBuser="neo4j"
    - PDBpassword="neo4j"
    - BUILD_OUTPUT=${TRAVIS_BUILD_DIR}/test.out
    - PING_SLEEP=60s
    - WORKSPACE=${TRAVIS_BUILD_DIR}
    - HOME=${TRAVIS_BUILD_DIR}
  matrix:
    - TOOL='add_anonymous_type' RUN_add_anonymous_types=true RUN_add_refs_for_anat=false RUN_import_pub_data=false RUN_make_named_edges=false RUN_KB2Prod=false RUN_add_constraints_and_redundant_labels=false
    - TOOL='add_refs_for_anat' RUN_add_anonymous_types=false RUN_add_refs_for_anat=true RUN_import_pub_data=false RUN_make_named_edges=false RUN_KB2Prod=false RUN_add_constraints_and_redundant_labels=false
    - TOOL='import_pub_data' RUN_add_anonymous_types=false RUN_add_refs_for_anat=false RUN_import_pub_data=true RUN_make_named_edges=false RUN_KB2Prod=false RUN_add_constraints_and_redundant_labels=false
    - TOOL='make_named_edges' RUN_add_anonymous_types=false RUN_add_refs_for_anat=false RUN_import_pub_data=false RUN_make_named_edges=true RUN_KB2Prod=false RUN_add_constraints_and_redundant_labels=false
    - TOOL='KB2Prod' RUN_add_anonymous_types=false RUN_add_refs_for_anat=false RUN_import_pub_data=false RUN_make_named_edges=false RUN_KB2Prod=true RUN_add_constraints_and_redundant_labels=false
    - TOOL='add_constraints_and_redundant_labels' RUN_add_anonymous_types=false RUN_add_refs_for_anat=false RUN_import_pub_data=false RUN_make_named_edges=false RUN_KB2Prod=false RUN_add_constraints_and_redundant_labels=true

before_install:
  - echo -e "travis_fold:start:OLS-loading"
  - mkdir -p ${HOME}/neo4j/data
  - travis_wait 200 docker run --volume=$HOME/neo4j/data:/data --env=VFB_OWL_VERSION=dev virtualflybrain/docker-ols-loader
  - echo -e "travis_fold:end:OLS-loading"
  - echo -e "travis_fold:start:neo4j"
  - travis_wait 200 docker network create -d bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 dockernet
  - travis_wait 200 docker run -d --name db -p 7474:7474 --net=dockernet --env=NEO4J_AUTH=${PDBuser}/${PDBpassword} --env=NEOREADONLY=false --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes --volume=$HOME/neo4j/data:/data virtualflybrain/docker-vfb-neo4j-productiondb
  - sleep 30s
  - echo -e "travis_fold:end:neo4j"

script:
  - echo -e "travis_fold:start:checks"
  - ${TRAVIS_BUILD_DIR}/runsilent.sh "docker logs db"
  - ${TRAVIS_BUILD_DIR}/runsilent.sh "curl -u ${PDBuser}:${PDBpassword} http://localhost:7474/db/data/"
  - echo -e "travis_fold:end:checks"
  - echo -e "travis_fold:start:dockerbuild"
  - ${TRAVIS_BUILD_DIR}/runsilent.sh "docker build -t test-image:test ."
  - echo -e "travis_fold:end:dockerbuild"
  - echo -e "travis_fold:start:dockerstart"
  - travis_wait 200 docker run -d --name test --net=dockernet --env=RUN_add_anonymous_types=${RUN_add_anonymous_types} --env=RUN_add_refs_for_anat=${RUN_add_refs_for_anat} --env=RUN_import_pub_data=${RUN_import_pub_data} --env=RUN_make_named_edges=${RUN_make_named_edges} --env=RUN_KB2Prod=${RUN_KB2Prod} --env=RUN_add_constraints_and_redundant_labels=${RUN_add_constraints_and_redundant_labels} --env=CHUNK_SIZE=1 --env=VFB_OWL_VERSION=dev --env=PDBSERVER=${PDBSERVER} --env=PDBuser=${PDBuser} --env=PDBpassword=${PDBpassword} test-image:test
  - sleep 2m
  - docker logs -f test 
  - if docker logs test 2>&1 | grep -v 'already exists' | grep -q Error; then travis_terminate 2; fi
